# syntax=docker/dockerfile:1.4

########## deps: full install, cached ##########
FROM --platform=linux/arm64 node:20-alpine AS deps
WORKDIR /app

COPY package*.json source.config.ts next.config.mjs ./
RUN --mount=type=cache,target=/root/.npm \
    npm ci

########## build: compile Next/Fumadocs ########
FROM --platform=linux/arm64 node:20-alpine AS build
WORKDIR /app
ENV NEXT_TELEMETRY_DISABLED=1

# Re-use cached deps (avoids reinstall). :contentReference[oaicite:2]{index=2}
COPY --from=deps /app/node_modules ./node_modules
COPY tailwind.config.js postcss.config.mjs next-sitemap.config.js ./
COPY . .
RUN npm run build        # produces .next/standalone
RUN npm prune --omit=dev # strip dev deps after build :contentReference[oaicite:3]{index=3}

########## runtime: slim, prod-only ##########
FROM --platform=linux/arm64 node:20-bookworm-slim AS runtime
WORKDIR /app
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    LD_LIBRARY_PATH=/usr/lib:/usr/local/lib

# minimal artefacts
COPY --from=build --chown=node:node /app/.next/standalone ./
COPY --from=build --chown=node:node /app/public        ./public
COPY --from=build --chown=node:node /app/node_modules  ./node_modules
COPY --from=build /app/package.json ./package.json
COPY --from=deps  --chown=node:node /app/.source            ./source

# drop root for security
RUN mkdir -p /app/.next/cache/images && chown -R node:node /app
USER node

EXPOSE 3000
CMD ["node", "server.js"]
